---
import { createResearcher } from "../../models/researcher";
import { db } from "../../db";
import bcrypt from "bcryptjs";
import * as fs from "fs/promises";
import { randomId } from "../../lib/randomId";

export const partial = true;

let response: { type: "message"; message: string; error: boolean } | undefined;
let id = Math.random().toString(36).slice(2, 9);

switch (Astro.request.method) {
  case "POST":
    const formData = await Astro.request.formData();

    if (formData.get("password") !== formData.get("password_confirm")) {
      response = {
        type: "message",
        message: "As senhas não coincidem.",
        error: true,
      };
      break;
    }

    if (formData.has("picture")) {
      const picture = formData.get("picture") as File;
      if (!["image/jpeg", "image/png"].includes(picture.type)) {
        response = {
          type: "message",
          message: "Formato de imagem inválido. Apenas JPEG e PNG são aceitos.",
          error: true,
        };
        break;
      }

      // Upload file
      const picturePath = `public/uploads/${randomId(16)}.${picture.type === "image/jpeg" ? "jpg" : "png"}`;
      await fs.writeFile(picturePath, Buffer.from(await picture.arrayBuffer()));
    }

    try {
      await createResearcher(db, {
        email: formData.get("email") as string,
        password: bcrypt.hashSync(formData.get("password") as string, 10),

        name: formData.get("name") as string,
        idAreas: (formData.getAll("areas[]") as string[]).map(Number),
        idMainArea: Number(formData.get("main_area")),
        idUniversity: Number(formData.get("university")),
        dateOfBirth: new Date(formData.get("dob") as string),
        contactInfo: formData.get("contact_info") as string,
      });

      response = {
        type: "message",
        message: "Pesquisador criado com sucesso",
        error: false,
      };
    } catch (error) {
      console.error(error);

      response = {
        type: "message",
        message: "Erro ao criar pesquisador",
        error: true,
      };
    }
    break;

  default:
    response = {
      type: "message",
      message: "Método inválido.",
      error: true,
    };
    break;
}

await new Promise((resolve) => setTimeout(resolve, 1000));
---

{" "}
{
  response?.type === "message" && (
    <>
      <div
        id={"message_popup_" + id}
        class:list={[
          "fixed bottom-6 right-6 max-w-[400px] flex items-start gap-2 shadow-md rounded-md px-3 py-2 transition-transform duration-700 ease-[cubic-bezier(.28,1.62,.34,.82)]",
          response.error
            ? "bg-red-100 text-red-800"
            : "bg-green-100 text-green-800",
        ]}
        style="transform: translate(0, 200%)"
      >
        {response.message}
        <button class="font-bold">
          {" "}
          ×{" "}
        </button>
      </div>
      <script is:inline define:vars={{messageId: "message_popup_" + id}}>
        const message = document.getElementById(messageId);
        message.querySelector("button").addEventListener("click", close);
        let autoClose;

        open();

        function open() {
          if (!message) return;
          message.style.transform = "translate(0, 0)";
          autoClose = setTimeout(close, 5000);
        }

        function close() {
          if (!message) return;
          clearTimeout(autoClose);
          message.style.transform = "translate(0, 200%)";
          setTimeout(() => {
            message.remove();
          }, 700);
        }
      </script>
    </>
  )
}
