---
import Button from "../../components/Button.astro";
import Container from "../../components/Container.astro";
import Input from "../../components/Input.astro";
import Labelled from "../../components/Labelled.astro";
import Link from "../../components/Link.astro";
import Select from "../../components/Select.astro";
import Textarea from "../../components/Textarea.astro";
import { db } from "../../db";
import Default from "../../layouts/Default.astro";
import { getAreasFlat } from "../../models/area";
import { getUniversities } from "../../models/university";
import {
  createResearcher,
  getResearcherByToken,
} from "../../models/researcher";
import {
  formString,
  formFile,
  formNumber,
  formNumberList,
  formDate,
} from "../../lib/query";
import { uploadImage } from "../../lib/upload";

const token = Astro.cookies.get("token")?.value;
let user: Awaited<ReturnType<typeof getResearcherByToken>> | undefined =
  undefined;
if (token) {
  user = await getResearcherByToken(db, token);
}
if (user) {
  return Astro.redirect(`/404`, 404);
}

const errors: Record<string, string> = {};
let input: {
  email?: string;
  password?: string;
  password_confirm?: string;
  name?: string;
  picture?: File;
  university?: number;
  main_area?: number;
  areas?: number[];
  dob?: Date;
  contact_info?: string;
} = {};

switch (Astro.request.method) {
  case "POST":
    const f = await Astro.request.formData();
    input = {
      email: formString(f, "email"),
      password: formString(f, "password"),
      password_confirm: formString(f, "password_confirm"),
      name: formString(f, "name"),
      picture: formFile(f, "picture"),
      university: formNumber(f, "university"),
      main_area: formNumber(f, "main_area"),
      areas: formNumberList(f, "areas[]"),
      dob: formDate(f, "dob"),
      contact_info: formString(f, "contact_info"),
    };

    if (
      input.email === undefined ||
      input.password === undefined ||
      input.password_confirm === undefined ||
      input.name === undefined ||
      input.university === undefined ||
      input.main_area === undefined ||
      input.dob === undefined
    ) {
      errors.generic = "Preencha todos os campos obrigatórios.";
      break;
    }

    if (input.password !== input.password_confirm) {
      errors.password = "As senhas não coincidem.";
      break;
    }

    let pictureUrl = undefined;

    if (input.picture) {
      if (!["image/jpeg", "image/png"].includes(input.picture.type)) {
        errors.picture =
          "Formato de imagem inválido. Apenas JPEG e PNG são aceitos.";
        break;
      }

      const filename = await uploadImage("public/uploads", input.picture);
      pictureUrl = `/uploads/${filename}`;
    }

    try {
      const pesquisador = await createResearcher(db, {
        email: input.email,
        password: input.password,

        name: input.name,
        pictureUrl,
        idAreas: input.areas || [],
        idMainArea: input.main_area,
        idUniversity: input.university,
        dateOfBirth: input.dob,
        contactInfo: input.contact_info,
      });

      return Astro.redirect(`/login`, 303);
    } catch (error) {
      console.error(error);

      errors.generic =
        "Erro ao criar pesquisador! Confira os dados e tente novamente.";
    }
    break;

  default:
    break;
}

const universityEntries = await getUniversities(db);
const areas = await getAreasFlat(db);
---

<Default title="Criar pesquisador">
  <main>
    <Container class="py-6">
      <Link href="/pesquisadores" class="text-blue-600">&lt; Voltar</Link>
      <h2 class="text-2xl font-bold">Criar pesquisador</h2>
      <form
        enctype="multipart/form-data"
        action=""
        method="post"
        class="max-w-lg mx-auto space-y-4"
      >
        {errors.generic && <p class="text-red-600">{errors.generic}</p>}
        <Labelled name="email" label="Email" required>
          <Input type="email" name="email" required value={input.email} />
        </Labelled>
        <Labelled name="password" label="Senha" required>
          <Input type="password" name="password" required />
        </Labelled>
        <Labelled name="password_confirm" label="Confirmar senha" required>
          <Input type="password" name="password_confirm" required />
          {errors.password && <p class="text-red-600">{errors.password}</p>}
        </Labelled>
        <hr />
        <Labelled name="name" label="Nome" required>
          <Input type="text" name="name" required value={input.name} />
        </Labelled>
        <Labelled name="picture" label="Foto de perfil">
          <Input type="file" name="picture" accept="image/jpeg,image/png" />
          {errors.picture && <p class="text-red-600">{errors.picture}</p>}
        </Labelled>
        <Labelled name="university" label="Universidade" required>
          <Select name="university" required>
            <option value="">Selecione a universidade</option>
            {
              universityEntries.map((university) => (
                <option
                  value={university.id}
                  selected={input.university === university.id}
                >
                  {university.name}
                </option>
              ))
            }
          </Select>
        </Labelled>
        <Labelled name="main_area" label="Área de pesquisa principal" required>
          <Select name="main_area">
            <option value="">Selecione a área principal</option>
            {
              areas.map((area) => (
                <option value={area.id} selected={input.main_area === area.id}>
                  {area.name}
                </option>
              ))
            }
          </Select>
        </Labelled>
        <Labelled name="areas[]" label="Áreas de Pesquisa">
          <template id="area_template">
            <div class="flex gap-2 group/control">
              <Select name="areas[]">
                <option value="">Selecione uma área</option>
                {
                  areas.map((area) => (
                    <option value={area.id}>{area.name}</option>
                  ))
                }
              </Select>
              <button
                class="group"
                type="button"
                onclick="this.closest('div').remove();"
              >
                <Button variant="destructive" size="sm">-</Button>
              </button>
            </div>
          </template>
          <div id="area_list" class="space-y-2">
            {
              input.areas?.map((areaId) => (
                <div class="flex gap-2 group/control">
                  <Select name="areas[]">
                    <option value="">Selecione uma área</option>
                    {areas.map((innerArea) => (
                      <option
                        value={innerArea.id}
                        selected={innerArea.id === areaId}
                      >
                        {innerArea.name}
                      </option>
                    ))}
                  </Select>
                  <button
                    class="group"
                    type="button"
                    onclick="this.closest('div').remove();"
                  >
                    <Button variant="destructive" size="sm">
                      -
                    </Button>
                  </button>
                </div>
              ))
            }
          </div>
          <button
            class="group mt-2 w-full"
            type="button"
            onclick="
            const areaList = document.getElementById('area_list');
            const select = document.getElementById('area_template').content.cloneNode(true).querySelector('div');
            areaList.appendChild(select);
          "
          >
            <Button variant="outline" size="sm">+ Adicionar área</Button>
          </button>
        </Labelled>
        <Labelled name="dob" label="Data de Nascimento" required>
          <Input
            type="date"
            name="dob"
            required
            value={input.dob?.toISOString().split("T")[0]}
          />
        </Labelled>
        <Labelled name="contact_info" label="Informações de contato">
          <Textarea rows="8" name="contact_info" value={input.contact_info} />
        </Labelled>

        <button type="submit" class="group"><Button>Enviar</Button></button>
      </form>
    </Container>
  </main>
</Default>
