---
import Button from "../../components/Button.astro";
import Container from "../../components/Container.astro";
import Input from "../../components/Input.astro";
import Labelled from "../../components/Labelled.astro";
import Link from "../../components/Link.astro";
import Select from "../../components/Select.astro";
import Textarea from "../../components/Textarea.astro";
import { db } from "../../db";
import Default from "../../layouts/Default.astro";
import {
  formDate,
  formNumber,
  formNumberList,
  formString,
} from "../../lib/query";
import { createProject } from "../../models/project";
import { getResearcherByToken, getResearchers } from "../../models/researcher";

const token = Astro.cookies.get("token")?.value;
let user: Awaited<ReturnType<typeof getResearcherByToken>> | undefined =
  undefined;
if (token) {
  user = await getResearcherByToken(db, token);
}
if (!user) {
  return Astro.redirect(`/404`, 404);
}

const errors: Record<string, string> = {};
let input: {
  creator?: number;
  title?: string;
  start_date?: Date;
  end_date?: Date;
  collaborators?: number[];
  description?: string;
} = {};

switch (Astro.request.method) {
  case "POST":
    const f = await Astro.request.formData();
    input = {
      creator: formNumber(f, "creator"),
      title: formString(f, "title"),
      start_date: formDate(f, "start_date"),
      end_date: formDate(f, "end_date"),
      collaborators: formNumberList(f, "collaborators[]"),
      description: formString(f, "description"),
    };

    if (
      input.creator === undefined ||
      input.title === undefined ||
      input.start_date === undefined
    ) {
      errors.generic = "Preencha todos os campos obrigatórios.";
      break;
    }

    if (input.end_date && input.start_date > input.end_date) {
      errors.end_date = "Data de término deve ser posterior à data de início.";
      break;
    }

    try {
      const projeto = await createProject(db, {
        creatorId: input.creator,
        title: input.title,
        startDate: input.start_date,
        endDate: input.end_date,
        idCollaborators: input.collaborators,
        description: input.description,
      });

      return Astro.redirect(`/projetos/${projeto.id}`, 303);
    } catch (error) {
      console.error(error);

      errors.generic =
        "Erro ao criar projeto! Confira os dados e tente novamente.";
    }
    break;

  default:
    break;
}

const researchers = await getResearchers(db, {});
---

<Default title="Criar projeto">
  <main>
    <Container class="py-6">
      <Link href="/projetos" class="text-blue-600">&lt; Voltar</Link>
      <h2 class="text-2xl font-bold">Criar projeto</h2>
      <form
        enctype="multipart/form-data"
        action=""
        method="post"
        class="max-w-lg mx-auto space-y-4"
      >
        <Labelled name="creator" label="Criador" required>
          <Select name="creator" required>
            <option value="">Selecione um pesquisador</option>
            {
              researchers.map((researcher) => (
                <option
                  value={researcher.id}
                  selected={input.creator === researcher.id}
                >
                  {researcher.name}
                </option>
              ))
            }
          </Select>
        </Labelled>
        <hr />
        <Labelled name="title" label="Título" required>
          <Input type="text" name="title" required value={input.title} />
        </Labelled>
        <Labelled name="start_date" label="Data de Início" required>
          <Input
            type="date"
            name="start_date"
            required
            value={input.start_date?.toISOString().split("T")[0]}
          />
        </Labelled>
        <Labelled name="end_date" label="Data de Término">
          <Input
            type="date"
            name="end_date"
            value={input.end_date?.toISOString().split("T")[0]}
          />
          {errors.end_date && <p class="text-red-600">{errors.end_date}</p>}
        </Labelled>
        <Labelled name="collaborators[]" label="Colaboradores">
          <template id="collab_template">
            <div class="flex gap-2 group/control">
              <Select name="collaborators[]" required>
                <option value="">Selecione um pesquisador</option>
                {
                  researchers.map((researcher) => (
                    <option value={researcher.id}>{researcher.name}</option>
                  ))
                }
              </Select>
              <button
                class="group"
                type="button"
                onclick="this.closest('div').remove();"
              >
                <Button variant="destructive" size="sm">-</Button>
              </button>
            </div>
          </template>
          <div id="collab_list" class="space-y-2">
            {
              input.collaborators?.map((collabId) => (
                <div class="flex gap-2 group/control">
                  <Select name="collaborators[]" required>
                    <option value="">Selecione um pesquisador</option>
                    {researchers.map((researcher) => (
                      <option
                        value={researcher.id}
                        selected={researcher.id === collabId}
                      >
                        {researcher.name}
                      </option>
                    ))}
                  </Select>
                  <button
                    class="group"
                    type="button"
                    onclick="this.closest('div').remove();"
                  >
                    <Button variant="destructive" size="sm">
                      -
                    </Button>
                  </button>
                </div>
              ))
            }
          </div>
          <button
            class="group mt-2 w-full"
            type="button"
            onclick="
            const collabList = document.getElementById('collab_list');
            const select = document.getElementById('collab_template').content.cloneNode(true).querySelector('div');
            collabList.appendChild(select);
          "
          >
            <Button variant="outline" size="sm">+ Adicionar pesquisador</Button>
          </button>
        </Labelled>
        <Labelled name="description" label="Descrição">
          <Textarea rows="8" name="description" value={input.description} />
        </Labelled>

        <button type="submit" class="group"><Button>Enviar</Button></button>
      </form>
    </Container>
  </main>
</Default>
